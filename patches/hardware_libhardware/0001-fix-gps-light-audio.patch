diff -ur libhardware/include/hardware/gps.h libhardware_mtk/include/hardware/gps.h
--- libhardware/include/hardware/gps.h	2016-01-22 15:47:44.063878000 -0800
+++ libhardware_mtk/include/hardware/gps.h	2016-01-23 05:25:12.364466000 -0800
@@ -37,6 +37,9 @@
 /** Milliseconds since January 1, 1970 */
 typedef int64_t GpsUtcTime;
 
+/** Maximum number of GNSS SVs for gps_sv_status_callback(). */
+#define GNSS_MAX_SVS 256
+
 /** Maximum number of SVs for gps_sv_status_callback(). */
 #define GPS_MAX_SVS 32
 
@@ -482,6 +485,33 @@
     float   azimuth;
 } GpsSvInfo;
 
+
+/** Represents GNSS SV information. */
+typedef struct {
+    /** set to sizeof(GnssSvInfo) */
+    size_t          size;
+    /** Pseudo-random number for the SV. */
+    int     prn;
+    /** Signal to noise ratio. */
+    float   snr;
+    /** Elevation of SV in degrees. */
+    float   elevation;
+    /** Azimuth of SV in degrees. */
+    float   azimuth;
+    /**
+     * SVs have ephemeris data.
+     */
+    bool has_ephemeris;
+    /**
+     * SVs have almanac data.
+     */
+    bool has_almanac;
+    /**
+     * SVs were used for computing the most recent position fix.
+     */
+    bool used_in_fix;
+} GnssSvInfo;
+
 /** Represents SV status. */
 typedef struct {
     /** set to sizeof(GpsSvStatus) */
@@ -511,6 +541,18 @@
 } GpsSvStatus;
 
 
+/** Represents GNSS SV status. */
+typedef struct {
+    /** set to sizeof(GnssSvStatus) */
+    size_t          size;
+
+    /** Number of SVs currently visible. */
+    int         num_svs;
+
+    /** Contains an array of GNSS SV information. */
+    GnssSvInfo   sv_list[GNSS_MAX_SVS];
+} GnssSvStatus;
+
 /* 2G and 3G */
 /* In 3G lac is discarded */
 typedef struct {
@@ -550,6 +592,12 @@
  */
 typedef void (* gps_sv_status_callback)(GpsSvStatus* sv_info);
 
+/**
+ * Callback with GNSS SV status information.
+ * Can only be called from a thread created by create_thread_cb.
+ */
+typedef void (* gnss_sv_status_callback)(GnssSvStatus* sv_info);
+
 /** Callback for reporting NMEA sentences.
  *  Can only be called from a thread created by create_thread_cb.
  */
@@ -583,6 +631,7 @@
     gps_location_callback location_cb;
     gps_status_callback status_cb;
     gps_sv_status_callback sv_status_cb;
+    gnss_sv_status_callback gnss_sv_status_cb;
     gps_nmea_callback nmea_cb;
     gps_set_capabilities set_capabilities_cb;
     gps_acquire_wakelock acquire_wakelock_cb;
diff -ur libhardware/include/hardware/lights.h libhardware_mtk/include/hardware/lights.h
--- libhardware/include/hardware/lights.h	2016-01-22 15:47:44.063878000 -0800
+++ libhardware_mtk/include/hardware/lights.h	2016-01-23 05:25:12.364466000 -0800
@@ -112,6 +112,9 @@
      *
      * The high byte should be ignored.  Callers will set it to 0xff (which
      * would correspond to 255 alpha).
+     *
+     * On CM12.1, the high byte value can be implemented to control the LEDs
+     * Brightness from the Lights settings. The value goes from 0x01 to 0xFF.
      */
     unsigned int color;
 
diff --git a/modules/audio_remote_submix/audio_hw.cpp b/modules/audio_remote_submix/audio_hw.cpp
index b9dcf7a..568bc64 100644
--- a/modules/audio_remote_submix/audio_hw.cpp
+++ b/modules/audio_remote_submix/audio_hw.cpp
@@ -158,11 +158,11 @@ typedef struct route_config {
     // destroyed if both and input and output streams are destroyed.
     struct submix_stream_out *output;
     struct submix_stream_in *input;
-#if ENABLE_RESAMPLING
-    // Buffer used as temporary storage for resampled data prior to returning data to the output
+#if (ENABLE_RESAMPLING || ENABLE_CHANNEL_CONVERSION)
+    // Buffer used as temporary storage for audio data prior to returning data to the output
     // stream.
-    int16_t resampler_buffer[DEFAULT_PIPE_SIZE_IN_FRAMES];
-#endif // ENABLE_RESAMPLING
+    int16_t processor_buffer[DEFAULT_PIPE_SIZE_IN_FRAMES];
+#endif
 } route_config_t;
 
 struct submix_audio_device {
@@ -472,8 +472,8 @@ static void submix_audio_device_release_pipe_l(struct submix_audio_device * cons
         rsxadev->routes[route_idx].rsxSource = 0;
     }
     memset(rsxadev->routes[route_idx].address, 0, AUDIO_DEVICE_MAX_ADDRESS_LEN);
-#ifdef ENABLE_RESAMPLING
-    memset(rsxadev->routes[route_idx].resampler_buffer, 0,
+#if (ENABLE_RESAMPLING || ENABLE_CHANNEL_CONVERSION)
+    memset(rsxadev->routes[route_idx].processor_buffer, 0,
             sizeof(int16_t) * DEFAULT_PIPE_SIZE_IN_FRAMES);
 #endif
 }
@@ -1089,13 +1089,14 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
         }
 #endif // ENABLE_CHANNEL_CONVERSION
 
+#if (ENABLE_RESAMPLING || ENABLE_CHANNEL_CONVERSION)
+        const size_t processor_buffer_size_frames =
+                sizeof(rsxadev->routes[in->route_handle].processor_buffer) / frame_size;
+#endif
 #if ENABLE_RESAMPLING
         const uint32_t input_sample_rate = in_get_sample_rate(&stream->common);
         const uint32_t output_sample_rate =
                 rsxadev->routes[in->route_handle].config.output_sample_rate;
-        const size_t resampler_buffer_size_frames =
-            sizeof(rsxadev->routes[in->route_handle].resampler_buffer) /
-                sizeof(rsxadev->routes[in->route_handle].resampler_buffer[0]);
         float resampler_ratio = 1.0f;
         // Determine whether resampling is required.
         if (input_sample_rate != output_sample_rate) {
@@ -1112,16 +1113,18 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
         while ((remaining_frames > 0) && (attempts < MAX_READ_ATTEMPTS)) {
             ssize_t frames_read = -1977;
             size_t read_frames = remaining_frames;
-#if ENABLE_RESAMPLING
+#if (ENABLE_RESAMPLING || ENABLE_CHANNEL_CONVERSION)
             char* const saved_buff = buff;
+#endif
+#if ENABLE_RESAMPLING
             if (resampler_ratio != 1.0f) {
                 // Calculate the number of frames from the pipe that need to be read to generate
                 // the data for the input stream read.
                 const size_t frames_required_for_resampler = (size_t)(
                     (float)read_frames * (float)resampler_ratio);
-                read_frames = min(frames_required_for_resampler, resampler_buffer_size_frames);
+                read_frames = min(frames_required_for_resampler, processor_buffer_size_frames);
                 // Read into the resampler buffer.
-                buff = (char*)rsxadev->routes[in->route_handle].resampler_buffer;
+                buff = (char*)rsxadev->routes[in->route_handle].processor_buffer;
             }
 #endif // ENABLE_RESAMPLING
 #if ENABLE_CHANNEL_CONVERSION
@@ -1129,6 +1132,13 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
                 // Need to read half the requested frames since the converted output
                 // data will take twice the space (mono->stereo).
                 read_frames /= 2;
+            } else if (output_channels == 2 && input_channels == 1) {
+                // If the resampler is active, we already swapped for the processor_buffer
+                if (resampler_ratio == 1.0f) {
+                    buff = (char*)rsxadev->routes[in->route_handle].processor_buffer;
+                }
+
+                read_frames = min(read_frames, processor_buffer_size_frames/2);
             }
 #endif // ENABLE_CHANNEL_CONVERSION
 
@@ -1147,11 +1157,17 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
                 if (output_channels == 2 && input_channels == 1) {
                     // Offset into the output stream data in samples.
                     ssize_t output_stream_offset = 0;
+                    // If resampler is active, continue writing to the temporary buffer
+                    int16_t *mixed_buffer =
+                        (resampler_ratio == 1.0f) ? (int16_t*)saved_buff : (int16_t*)buff;
                     for (ssize_t input_stream_frame = 0; input_stream_frame < frames_read;
                          input_stream_frame++, output_stream_offset += 2) {
                         // Average the content from both channels.
-                        data[input_stream_frame] = ((int32_t)data[output_stream_offset] +
-                                                    (int32_t)data[output_stream_offset + 1]) / 2;
+                        mixed_buffer[input_stream_frame] = ((int32_t)data[output_stream_offset] +
+                                                            (int32_t)data[output_stream_offset + 1]) / 2;
+                    }
+                    if (resampler_ratio == 1.0f) {
+                        buff = saved_buff;
                     }
                 } else if (output_channels == 1 && input_channels == 2) {
                     // Offset into the input stream data in samples.
@@ -1175,13 +1191,20 @@ static ssize_t in_read(struct audio_stream_in *stream, void* buffer,
                 // sampled at a different rate this will result in very nasty aliasing.
                 const float output_stream_frames = (float)frames_read;
                 size_t input_stream_frame = 0;
+                size_t input_buf_offset = 0, output_buf_offset = 0;
                 for (float output_stream_frame = 0.0f;
                      output_stream_frame < output_stream_frames &&
                      input_stream_frame < remaining_frames;
                      output_stream_frame += resampler_ratio, input_stream_frame++) {
-                    resampled_buffer[input_stream_frame] = data[(size_t)output_stream_frame];
+                    input_buf_offset = input_stream_frame * input_channels;
+                    output_buf_offset = (size_t)output_stream_frame * input_channels;
+                    resampled_buffer[input_buf_offset] = data[output_buf_offset];
+                    if (input_channels == 2) {
+                        // copy second channel in the frame
+                        resampled_buffer[input_buf_offset + 1] = data[output_buf_offset + 1];
+                    }
                 }
-                ALOG_ASSERT(input_stream_frame <= (ssize_t)resampler_buffer_size_frames);
+                ALOG_ASSERT(input_stream_frame <= (ssize_t)processor_buffer_size_frames);
                 SUBMIX_ALOGV("in_read(): resampler produced %zd frames", input_stream_frame);
                 frames_read = input_stream_frame;
                 buff = saved_buff;
